insertName=Insert your name:
insertSurname=Insert your surname:
insertAge=Insert you age:
buttonLabel=Submit

cdi_title=Context and Dependency Injection (CDI)
cdi_description=The Context and Dependency Injection (CDI) is a JSF procedure to connect application logic with the web-pages. It uses tho tags for Java classed @Named and @Scoped annotation.
session_description=The @SessionScoped creates a class that will be active as long as the Browser session lives.
request_description=The @RequestScoped injects the class as long as the HTTP request is not closed.
view_description=The @ViewScoped creates an instance of a class that will be valid as long as the JSF page is not left.
application_description=The @ApplicationScoped maintains the object as long as the application lives.

selectables_selectBooleanCheckbox_title=Select boolean checkbox
selectables_selectBooleanCheckbox_subtitle=The "selectBooleanCheckbox" creates a simple checbok linked with a boolean value of a Bean class

selectables_selectManyCheckboxes_title=Select many checkboxes
selectables_selectManyCheckboxes_subtitle=The "selectManyCheckBoxes" creates a set of checkboxes using a Map<String, String> indicating the value and the corresponding label 

selectables_selectManyListbox_title=Select many listbox
selectables_selectManyListbox_subtitle=The "selectManyListbox" create a series of list box, where differente from the checkbox, the user can select many values

selectables_selectOneListbox_title=Select one listbox
selectables_selectOneListbox_subtitle=The "selectOneListbox" creates a list of values where only one value can be selected

selectables_selectManyMenu_title=Select many menu
selectables_selectManyMenu_subtitle=The "selectManyMenu" is similar to "selectManyListbox" but in a menu-style

selectables_selectOneMenu_title=Select One Menu
selectables_selectOneMenu_subtitle=The "selectOneMenu" is similar to "selectManyMenu" but with a single value

selectables_selectOneRadio_title=Select One Radio
selectables_selectOneRadio_subtitle=The "selectOneRadio" is the most common radio button menu

listener_title=How to create a listner
listener_subtitle=There are two ways to create a listener in Jakarta, the first is the most common one and consists in create a Bean class connected to the button. The second method consist in create a class the extends a specific implementation of a Listener, and then add it to the button parameters. There are 4 type of listeners.

listener_classic=Classic listener with Bean

listener_actionListener_title=Action Listener
listener_actionListener_subtitle=Using a class the implements the ActionListener class and the method to trigger

listener_valueChangeListener_title=Value Change Listener
listener_valueChangeListener_subtitle=The listener triggered for a specific value change of one component

listener_phaseListener_title=Phase Listener
listener_phaseListener_subtitle=The listener for a specific document phase change 

listener_propertyListener_title=Property Listener
listener_propertyListener_subtitle=THe listener for updating a specific Java injected object.

listener_button=Go

ajax_name=Insert you name:
ajax_surname=Insert your surname
ajax_date=Inser your date of birth

ajax_classic_title=AJAX tag
ajax_classic_subtitle=The classic way of using the ajax tag, consits in add the tag insite the button, indicanting the value to update and the field to send

ajax_other_title=AJAX tag
ajax_other_subtitle=Another solution consists in enclosing the fields to send, inside the AJAX tag and specify the output field.